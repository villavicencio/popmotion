'use strict';

exports.__esModule = true;

var _calc = require('../../inc/calc');

var BLEND_ACCURACY = 60;

exports.default = function (outAction, inAction, flowValue, key) {
  var outValue = outAction.values[key];

  if (outAction.elapsed === undefined || !outValue) {
    return;
  }

  var inValue = inAction.values[key];
  var outTotalDuration = outValue.delay + outValue.duration;
  var timeUntilOutEnd = Math.min(outTotalDuration - outAction.elapsed, inValue.delay + inValue.duration);
  var inPositionAtOutEnd = (0, _calc.ease)((0, _calc.restrict)((0, _calc.getProgressFromValue)(timeUntilOutEnd, 0, inValue.delay + inValue.duration), 0, 1), inValue.from, inValue.to, inValue.ease);
  var inBiggerThanOutAtStart = inValue.from > outValue.current;
  var inBiggerThanOutAtEnd = inPositionAtOutEnd > outValue.to;
  var tweensIntersect = inBiggerThanOutAtStart !== inBiggerThanOutAtEnd;

  var blendCurve = [[0, outValue.current], [timeUntilOutEnd, inPositionAtOutEnd]];

  // If tweens intersect, resolve tweens at a resolution to find exactly where
  if (tweensIntersect) {
    var timeStepToTest = timeUntilOutEnd / BLEND_ACCURACY;
    var foundP1 = false;
    var foundP2 = false;

    for (var i = 0; i <= BLEND_ACCURACY; i++) {
      var timeStep = i * timeStepToTest;
      var outAtTime = (0, _calc.ease)((0, _calc.getProgressFromValue)(outAction.elapsed + timeStep, outValue.delay, outValue.duration), outValue.from, outValue.to, outValue.ease);
      var inAtTime = (0, _calc.ease)((0, _calc.getProgressFromValue)(inAction.elapsed + timeStep, inValue.delay, inValue.duration), inValue.from, inValue.to, inValue.ease);

      if (!foundP1 && (inBiggerThanOutAtStart && inAtTime < outAtTime || !inBiggerThanOutAtStart && inAtTime > outAtTime)) {
        blendCurve.splice(1, 0, [timeStep, inAtTime]);
        foundP1 = true;
      }

      if (foundP1 && (inBiggerThanOutAtStart && inAtTime < outValue.current || !inBiggerThanOutAtStart && inAtTime > outValue.current)) {
        blendCurve[2] = [timeStep, inAtTime];
        foundP2 = true;
      }

      if (foundP2) {
        break;
      }
    }
  }

  if (blendCurve.length === 2) {
    // Pass between tweens using incoming easing if just two points
    return function () {
      var blendProgress = (0, _calc.restrict)((0, _calc.getProgressFromValue)(inAction.elapsed, blendCurve[0][0], blendCurve[1][0]), 0, 1);

      if (blendProgress === 1) {
        flowValue.blendCurve = undefined;
      }

      return (0, _calc.ease)(blendProgress, outValue.current, inValue.current, inValue.ease);
    };
  } else {
    // Pass between tweens using bezier interpolation
    return function () {
      var blendProgress = (0, _calc.restrict)((0, _calc.getProgressFromValue)(inAction.elapsed, blendCurve[0][0], blendCurve[2][0]), 0, 1);
      var aP = (0, _calc.getValueFromProgress)(blendProgress, blendCurve[0][1], blendCurve[1][1]);
      var bP = (0, _calc.getValueFromProgress)(blendProgress, blendCurve[1][1], blendCurve[2][1]);

      if (blendProgress === 1) {
        flowValue.blendCurve = undefined;
        return inValue.current;
      }

      return (0, _calc.getValueFromProgress)(blendProgress, aP, bP);
    };
  }
};
//# sourceMappingURL=data:application/json;base64,